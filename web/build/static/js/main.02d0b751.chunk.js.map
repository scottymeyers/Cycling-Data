{"version":3,"sources":["config.ts","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["mapLibraries","mapStyles","featureType","elementType","stylers","visibility","color","saturation","lightness","App","useState","map","setMap","mapOptions","useRef","center","lat","lng","clickableIcons","disableDefaultUI","disableDoubleClickZoom","draggableCursor","minZoom","maxZoom","panControl","scrollwheel","styles","config","zoom","data","JSON","parse","stringify","activities","default","useEffect","route","addGeoJson","setStyle","strokeColor","strokeWeight","googleMapsApiKey","process","libraries","loadingElement","id","options","current","onLoad","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qNAEaA,EAAe,CAAC,SAAU,UAAW,YAErCC,EAAwC,CACnD,CACEC,YAAa,iBACbC,YAAa,MACbC,QAAS,CACP,CACEC,WAAY,SAIlB,CACEH,YAAa,iBACbC,YAAa,mBACbC,QAAS,CACP,CACEE,MAAO,aAIb,CACEJ,YAAa,YACbC,YAAa,MACbC,QAAS,CACP,CACEE,MAAO,WAET,CACED,WAAY,QAIlB,CACEH,YAAa,MACbC,YAAa,MACbC,QAAS,CACP,CACEC,WAAY,SAIlB,CACEH,YAAa,OACbC,YAAa,MACbC,QAAS,CACP,CACEG,YAAa,KAEf,CACEC,UAAW,MAIjB,CACEN,YAAa,OACbC,YAAa,gBACbC,QAAS,CACP,CACEE,MAAO,aAIb,CACEJ,YAAa,OACbC,YAAa,kBACbC,QAAS,CACP,CACEE,MAAO,aAIb,CACEJ,YAAa,OACbC,YAAa,SACbC,QAAS,CACP,CACEC,WAAY,SAIlB,CACEH,YAAa,OACbC,YAAa,mBACbC,QAAS,CACP,CACEE,MAAO,aAIb,CACEJ,YAAa,OACbC,YAAa,cACbC,QAAS,CACP,CACEC,WAAY,SAIlB,CACEH,YAAa,eACbC,YAAa,MACbC,QAAS,CACP,CACEC,WAAY,gBAIlB,CACEH,YAAa,gBACbC,YAAa,cACbC,QAAS,CACP,CACEC,WAAY,SAIlB,CACEH,YAAa,UACbC,YAAa,MACbC,QAAS,CACP,CACEC,WAAY,SAIlB,CACEH,YAAa,QACbC,YAAa,MACbC,QAAS,CACP,CACEE,MAAO,QAET,CACED,WAAY,S,kBC3FLI,EAvCO,WAAO,IAAD,EACJC,mBAAiC,MAD7B,mBACnBC,EADmB,KACdC,EADc,KAEpBC,EAAaC,iBAA+B,CAChDC,OAAQ,CAAEC,IAAK,OAAQC,KAAM,QAC7BC,gBAAgB,EAChBC,kBAAkB,EAClBC,wBAAwB,EACxBC,gBAAiB,QACjBC,QAAS,GACTC,QAAS,GACTC,YAAY,EACZC,aAAa,EACbC,OAAQC,EACRC,KAAM,KAIFC,EADmBC,KAAKC,MAAMD,KAAKE,UAAUC,IACAC,QAWnD,OATAC,qBAAU,WACHxB,IACLkB,EAAKlB,KAAI,SAACyB,GAAD,OAA8BzB,EAAIkB,KAAKQ,WAAWD,MAC3DzB,EAAIkB,KAAKS,SAAS,CAChBC,YAAa,UACbC,aAAc,OAEf,CAACX,EAAMlB,IAGR,kBAAC,IAAD,CACE8B,iBDpCgBC,0CCqChBC,UAAWhB,EACXiB,eAAgB,sCAEhB,kBAAC,IAAD,CAAWC,GAAG,MAAMC,QAASjC,EAAWkC,QAASC,OAAQpC,MC5B3CqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.02d0b751.chunk.js","sourcesContent":["export const apiKey = process.env.REACT_APP_GMAPS_API_KEY;\n\nexport const mapLibraries = ['places', 'drawing', 'geometry'];\n\nexport const mapStyles: google.maps.MapTypeStyle[] = [\n  {\n    featureType: 'administrative',\n    elementType: 'all',\n    stylers: [\n      {\n        visibility: 'off',\n      },\n    ],\n  },\n  {\n    featureType: 'administrative',\n    elementType: 'labels.text.fill',\n    stylers: [\n      {\n        color: '#444444',\n      },\n    ],\n  },\n  {\n    featureType: 'landscape',\n    elementType: 'all',\n    stylers: [\n      {\n        color: '#FFFFFF',\n      },\n      {\n        visibility: 'on',\n      },\n    ],\n  },\n  {\n    featureType: 'poi',\n    elementType: 'all',\n    stylers: [\n      {\n        visibility: 'off',\n      },\n    ],\n  },\n  {\n    featureType: 'road',\n    elementType: 'all',\n    stylers: [\n      {\n        saturation: -100,\n      },\n      {\n        lightness: 45,\n      },\n    ],\n  },\n  {\n    featureType: 'road',\n    elementType: 'geometry.fill',\n    stylers: [\n      {\n        color: '#d6d6d6',\n      },\n    ],\n  },\n  {\n    featureType: 'road',\n    elementType: 'geometry.stroke',\n    stylers: [\n      {\n        color: '#eaeaea',\n      },\n    ],\n  },\n  {\n    featureType: 'road',\n    elementType: 'labels',\n    stylers: [\n      {\n        visibility: 'off',\n      },\n    ],\n  },\n  {\n    featureType: 'road',\n    elementType: 'labels.text.fill',\n    stylers: [\n      {\n        color: '#dedede',\n      },\n    ],\n  },\n  {\n    featureType: 'road',\n    elementType: 'labels.icon',\n    stylers: [\n      {\n        visibility: 'off',\n      },\n    ],\n  },\n  {\n    featureType: 'road.highway',\n    elementType: 'all',\n    stylers: [\n      {\n        visibility: 'simplified',\n      },\n    ],\n  },\n  {\n    featureType: 'road.arterial',\n    elementType: 'labels.icon',\n    stylers: [\n      {\n        visibility: 'off',\n      },\n    ],\n  },\n  {\n    featureType: 'transit',\n    elementType: 'all',\n    stylers: [\n      {\n        visibility: 'off',\n      },\n    ],\n  },\n  {\n    featureType: 'water',\n    elementType: 'all',\n    stylers: [\n      {\n        color: 'blue',\n      },\n      {\n        visibility: 'on',\n      },\n    ],\n  },\n];\n","import React, { useRef, useState, useEffect } from 'react';\nimport { LoadScript, GoogleMap } from '@react-google-maps/api';\nimport { FeatureCollection } from 'geojson';\nimport * as config from 'config';\nimport * as activities from 'activities.json';\n\nconst App: React.FC = () => {\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const mapOptions = useRef<google.maps.MapOptions>({\n    center: { lat: 40.699, lng: -73.976 },\n    clickableIcons: false,\n    disableDefaultUI: true,\n    disableDoubleClickZoom: true,\n    draggableCursor: 'arrow',\n    minZoom: 10,\n    maxZoom: 16,\n    panControl: false,\n    scrollwheel: true,\n    styles: config.mapStyles,\n    zoom: 14,\n  });\n\n  const parsedActivities = JSON.parse(JSON.stringify(activities));\n  const data: FeatureCollection[] = parsedActivities.default;\n\n  useEffect(() => {\n    if (!map) return;\n    data.map((route: FeatureCollection) => map.data.addGeoJson(route));\n    map.data.setStyle({\n      strokeColor: '#000000',\n      strokeWeight: 2,\n    });\n  }, [data, map]);\n\n  return (\n    <LoadScript\n      googleMapsApiKey={config.apiKey}\n      libraries={config.mapLibraries}\n      loadingElement={<></>}\n    >\n      <GoogleMap id=\"map\" options={mapOptions.current} onLoad={setMap} />\n    </LoadScript>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}